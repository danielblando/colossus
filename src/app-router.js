// Generated by CoffeeScript 1.9.3
(function() {
  var AppRouter, Gallery, path, pkg;

  Gallery = require('./lib/gallery');

  pkg = require('../package.json');

  path = require('path');

  AppRouter = (function() {
    function AppRouter(router1) {
      this.router = router1;
      this.router.route('/:accountName/colossus/:appName/*').all(function(req, res, next) {
        var accountName, appName, gallery, promise, sandBox, version;
        accountName = req.params.accountName;
        appName = req.params.appName;
        sandBox = req.headers['x-vtex-sandbox'];
        version = req.headers['x-vtex-env-version'];
        gallery = new Gallery(accountName);
        if ((version != null) || (sandBox != null)) {
          promise = gallery.downloadFilesFromCustomApp(appName, version, sandBox);
        } else {
          promise = gallery.downloadFilesFromDefaultApp(appName);
        }
        promise = promise.then((function(_this) {
          return function(path) {
            var appPath, application;
            appPath = path;
            if (sandBox != null) {
              _this.clearSandboxCache('../' + appPath + 'colossus');
            }
            application = require('../' + appPath + 'colossus');
            return application.run(accountName, appName, req, res, next);
          };
        })(this));
        return promise["catch"](function(err) {
          return next(err);
        });
      });
      this.router.route('/healthcheck').get(function(req, res, next) {
        return res.json("ok");
      });
      this.router.route('/meta/whoami').get(function(req, res, next) {
        var whoami;
        whoami = {
          app: pkg.name,
          appShortName: pkg.name,
          version: pkg.version,
          roots: pkg.paths,
          hosts: pkg.hosts
        };
        return res.json(whoami);
      });
    }

    AppRouter.prototype.clearSandboxCache = function(completePath) {
      var file, folder, key;
      file = require.resolve(completePath);
      folder = path.dirname(file);
      for (key in require.cache) {
        if (key.indexOf(folder, 0) === 0) {
          delete require.cache[key];
        }
      }
      return console.log(folder);
    };

    return AppRouter;

  })();

  module.exports = function(router) {
    return new AppRouter(router);
  };

}).call(this);

//# sourceMappingURL=app-router.js.map
